@model IList<SMO.Service.PS.Models.VolumeWorkViewModel>
@using Newtonsoft.Json.Serialization;
@using Newtonsoft.Json;
@using SMO.Core.Entities.PS;
@using SMO.Core.Entities.MD;
@{
    var gridId = Guid.NewGuid().ToString();
    var formId = Guid.NewGuid().ToString();
    var jsonSerializeSettings = new JsonSerializerSettings { ContractResolver = new CamelCasePropertyNamesContractResolver() };
    var statusDict = new Dictionary<string, string>();
    foreach (ProjectWorkVolumeStatus projectVolume in Enum.GetValues(typeof(ProjectWorkVolumeStatus)))
    {
        statusDict.Add(projectVolume.GetValue(), projectVolume.GetName());
    }
    var currentObj = ViewBag.CurrentObj as T_PS_VOLUME_WORK;
    if (string.IsNullOrEmpty(currentObj.STATUS))
    {
        currentObj.STATUS = ProjectWorkVolumeStatus.KHOI_TAO.GetValue();
    }
    var isEditingObj = currentObj.ID != Guid.Empty;
    var startDate = isEditingObj ? currentObj.FROM_DATE :  null;
    var toDate = isEditingObj ? currentObj.TO_DATE : null;
    var customer = ViewBag.Customer as T_MD_CUSTOMER;

    var editable = false;
    var disabled = "disabled";
    if (AuthorizeUtilities.CheckUserRightProject("RP8.1", currentObj.PROJECT_ID))
    {
        editable = true;
        disabled = "";
    }
    var project = SMOUtilities.GetProject(currentObj.PROJECT_ID);
    var isProjectCanEdit = ProjectStatus.BAT_DAU.GetValue() == project.STATUS;
    var lstStatusInModel = Model.Select(x => new { Code = x.WorkStatusCode, Name = x.WorkStatus }).Distinct().ToList();
    var summaryRowId = Guid.NewGuid();

    string[] header = new string[] { customer.NAME, project.NAME, project.CODE, startDate?.Day.ToString(), startDate?.Month.ToString(), startDate?.Year.ToString(), toDate?.Day.ToString(), toDate?.Month.ToString(), toDate?.Year.ToString() };
    if (project.STATUS == "04" || project.STATUS == "05")
    {
        editable = false;
    }
}
<style>
    .fade-work {
        position: relative;
        animation: fadeInBottom 1.8s;
        animation-timing-function: ease;
    }

    @@keyframes fadeInBottom {
        from {
            opacity: 0;
            transform: translateY(100%);
        }

        to {
            opacity: 1
        }
    }
</style>
<div class="row m-t-30 fade-work" id="@formId">
    <div class="col-md-3 col-xs-12">
        <label>Khách hàng</label>
        <div class="form-group">
            <div class="form-line">
                <input class="form-control" data-val="False" readonly value="@customer.NAME.ToUpper()">
            </div>
        </div>
    </div>

    <div class="col-md-3 col-xs-12">
        <div class="form-group" style="display:flex; flex-flow: row; gap: 10px;">
            <div style="flex: 1">
                <div class="form-line">
                    <label>Từ ngày</label>
                    <input class="form-control datepicker" name="fromDate" id="fromDate" autocomplete="off" type="text" @disabled
                           onchange="onChangeDate()" value="@startDate" />
                </div>
            </div>
            <div style="flex: 1">
                <div class="form-line">
                    <label>Đến ngày</label>
                    <input class="form-control datepicker" name="toDate" id="toDate" type="text" @disabled
                           onchange="onChangeDate()" autocomplete="off" value="@toDate" />
                </div>
            </div>
        </div>
    </div>

    <div class="col-md-3 col-xs-12">
        <label>Trạng thái</label>
        <div class="form-group">
            <div class="form-line">
                <input class="form-control" id="status" data-val="False" readonly value="@(currentObj.STATUS.GetEnum<ProjectWorkVolumeStatus>().GetName())">
            </div>
        </div>
    </div>

    <div class="col-md-3 col-xs-12">
        <label>Mã chứng từ SAP</label>
        <div class="form-group">
            <div class="form-line">
                <input class="form-control" id="sapDocId" data-val="False" readonly value="@currentObj.SAP_DOCID">
            </div>
        </div>
    </div>

    <div class="clearfix"></div>
    <div style="float:right; margin-bottom: 10px;">
        @if (lstStatusInModel.Count > 1)
        {
            <span class="badge bg-deep-purple" style="cursor: pointer" onclick="ResetFilterStatus()">Tất cả <span class="badge">@Model.Count</span></span>
        }
        @foreach (var item in lstStatusInModel)
        {
            var count = Model.Count(x => x.WorkStatusCode == item.Code);
            if (item.Code == "01")
            {
                <span class="badge bg-red" style="cursor: pointer" onclick="ApplyFilterStatus('@item.Name')">@item.Name <span class="badge">@count</span></span>
            }
            else if (item.Code == "02")
            {
                <span class="badge bg-blue" style="cursor: pointer" onclick="ApplyFilterStatus('@item.Name')">@item.Name <span class="badge">@count</span></span>
            }
            else if (item.Code == "03")
            {
                <span class="badge bg-amber" style="cursor: pointer" onclick="ApplyFilterStatus('@item.Name')">@item.Name <span class="badge">@count</span></span>
            }
            else if (item.Code == "04")
            {
                <span class="badge bg-green" style="cursor: pointer" onclick="ApplyFilterStatus('@item.Name')">@item.Name <span class="badge">@count</span></span>
            }
        }
    </div>
    <div style="height: calc(100vh - 302px)" id="@gridId"></div>
</div>

<script type="text/javascript">
    function ApplyFilterStatus(name) {
        grid.data.filter({ by: "workStatus", match: name });
    }

    function ResetFilterStatus(name) {
        grid.data.filter();
    }

    var editableWorkCustomer= false;
    @if (editable)
    {
        <text>
    editableWorkCustomer = true;
        </text>
    }
    if (@project.STATUS == "04" ||@project.STATUS == "05") {
        editable = false;
    }
    $(function () {
        Forms.CompleteUI();
        @if (!new string[] {@ProjectWorkVolumeStatus.KHOI_TAO.GetValue(),
        @ProjectWorkVolumeStatus.KHONG_XAC_NHAN.GetValue(),
        @ProjectWorkVolumeStatus.TU_CHOI.GetValue() }.Contains(currentObj.STATUS))
        {
            <text>
            $('#@formId #fromDate').prop('disabled', true);
        $('#@formId #toDate').prop('disabled', true);
        </text>
        }
    });

    const statuses = @Html.Raw(JsonConvert.SerializeObject(statusDict));
    const rawData = @Html.Raw(JsonConvert.SerializeObject(Model, jsonSerializeSettings));

    function validateNumber(value) {
        return numeral(isNaN(value) ? 0 : value).format('0.[0000000000]')
    }
    function displayNumber(value) {
        return numeral(isNaN(value) ? 0 : value).format('0,0.[0000000000]')
    }
    function displayPercentage(value) {
        return numeral(isNaN(value) ? 0 : value).format('0,0.[00]%')
    }
    function displayNumberRounded(value) {
        return _.isNil(value) ? value : numeral(isNaN(value) ? 0 : value).format('0,0')
    }
    function calculateKLDoDang(row) {
        const { accumulatedVolume, accumulateAcceptedVolume } = row;
        return accumulatedVolume - accumulateAcceptedVolume
    }
    function displayQuantity(value, row) {
        const { unitCode } = row
        if (unitCode === "%") {
            return numeral(isNaN(value) ? 0 : value).format('0,0.[0000000000]%')
        }
        return numeral(isNaN(value) ? 0 : value).format('0,0.[0000000000]')
    }

    const structGroup = _.chain(rawData)
            .map(x => ({
                ...x,
                total: roundNumber(x.workVolume * x.price),
                id: x.projectStructureId,
                statusText: statuses[x.status],
                finishedDate: x.finishedDate ? moment(x.finishedDate).toDate() : undefined,
                onProgressVolume: calculateKLDoDang(x)
            }))
        .reverse()
        .map((row, _index, collection) => {
            const { projectStructureId, total } = row
            const children = _.filter(collection, ['parentId', projectStructureId])
            if (!children) {
                return row;
            }
            if (!total) {
                row.total = _.sumBy(children, 'total')
            }
            return row
        })
        .reverse()
        .value();

    const allIds = _.map(structGroup, "id")

    if (structGroup.length > 0) {
        structGroup.unshift({
            total: _.chain(structGroup)
                .filter(({ parentId }) => !allIds.includes(parentId))
                .sumBy("total")
                .value(),
            projectStructureName: 'Tổng cộng',
            id: "@summaryRowId",
            isSummary: true
        })
    }

    function calculateTyLeHoanThanh(row) {
        const { contractVolume, accumulatedVolume } = row;
        if (accumulatedVolume == 0 || contractVolume == 0 || accumulatedVolume == null || contractVolume == null) {
            return 0;
        } else {
            return accumulatedVolume / contractVolume;
        }
    }

    const gridWithTotal = _.map(structGroup, (row) => {
        return {
            ...row,
            percentageDone: calculateTyLeHoanThanh(row)
        }
    })

    const columns = [
        {
            id: "projectStructureType", header: [{ text: "", align: 'center'}],
            template: (type, row) => {
                const { isSummary } = row
                if (isSummary) {
                    return undefined
                }
                return `<image src="Content/Images/IconProject/${type}.png"></image>`
            },
            htmlEnable: true,
            align: 'center',
            width: 50
        },
        { id: "projectStructureCode", header: [{ text: "Mã ", align: 'center' }], width: 100 },
        { id: "projectStructureName", header: [{ text: "Hạng mục công việc", align: 'center' }, { content: "inputFilter" }], width: 300 },
        { id: "contractCode", header: [{ text: "Mã hợp đồng", align: 'center' }, { content: "selectFilter" }], width: 150 },
        { id: "unitCode", header: [{ text: "ĐVT", align: 'center'}], width: 100 },
        {
            id: "contractVolume", header: [{ text: "KL hợp đồng", align: 'center' }], width: 112, align: "right", template: displayQuantity
        },
        {
            id: "designVolume", header: [{ text: "KL thiết kế", align: 'center' }], width: 112, align: "right", template: displayQuantity
        },
        {
            id: "planVolume", header: [{ text: "KL kế hoạch", align: 'center' }], width: 110, align: "right", template: displayQuantity
        },
        {
            id: "accumulatedPlanVolume", header: [{ text: "LK kế hoạch", align: 'center' }], width: 110, align: "right", template: displayQuantity
        },
        {
            id: "price", header: [{ text: "Đơn giá", align: 'center' }], align: "right", type: "decimal", width: 120, template: displayNumber
        },
        {
            id: "workVolume", header: [{ text: "KL thực hiện", align: 'center' }], adjust: true,
            editable: editableWorkCustomer, align: "right",
            template: displayQuantity
        },
        {
            id: "total", header: [{ text: "Thành tiền", align: 'center' }], adjust: true, align: "right", type: "number", template: displayNumberRounded
        },
        {
            id: "accumulatedVolume", header: [{ text: "LK thực hiện", align: 'center' }], adjust: true, align: "right", template: displayQuantity
        },
        {
            id: "totalAccumulatedVolume", header: [{ text: "LK KL đã nhập", align: 'center' }], adjust: true, maxWidth:125, align: "right", template: displayQuantity
        },
        {
            id: "acceptVolume", hidden: true, header: [{ text: "KL xác nhận", align: 'center' }], adjust: true,
            editable: editableWorkCustomer, align: "right", template: displayQuantity
        },
        {
            id: "accumulateAcceptedVolume", hidden: true, header: [{ text: "LK xác nhận", align: 'center' }],
            adjust: true, align: "right", template: displayQuantity
        },
        {
            id: "onProgressVolume", hidden: true, header: [{ text: "KL dở dang", align: 'center' }], adjust: true, align: "right", template: displayQuantity
        },
        {
            id: "percentageDone", header: [{ text: "Tỷ lệ hoàn thành(%)", align: 'center' }], width: 131, align: "right", template: displayPercentage
        },

        { id: "notes", header: [{ text: "Ghi chú", align: 'center'}], editable: editableWorkCustomer, maxWidth: 200, width: 96 },
        { id: "finishedDate", header: [{ text: "Ngày hoàn thành", align: 'center'}], type: "date", format: "%d/%m/%Y", width: 133},
        {
            id: "workStatus", header: [{ text: "Trạng thái công việc", align: 'center'}],
            template: (value, task) => {
                if (task.workStatusCode == "01") {
                    return `<span class="badge bg-red">${task.workStatus}</span>`
                } else if (task.workStatusCode == "02") {
                    return `<span class="badge bg-blue">${task.workStatus}</span>`
                } else if (task.workStatusCode == "03") {
                    return `<span class="badge bg-amber">${task.workStatus}</span>`
                } else if (task.workStatusCode == "04") {
                    return `<span class="badge bg-green">${task.workStatus}</span>`
                }
            },
            htmlEnable: true,
            align: 'center',
            width: 133
        },
        { id: "userUpdated", header: [{ text: "Người cập nhật", align: 'center'}], width: 133 },
    ]
    if (@isEditingObj.ToString().ToLower()) {
        columns.push({
            id: "referenceFileId", header: [{ text: "Đính kèm", align: 'center'}],
            adjust: false,
            width: 96,
            align: 'center',
            template: (value, task) => {
                if (task.projectStructureType !== '@ProjectEnum.PROJECT.ToString()' && task.referenceFileId) {
                    return `<i class="fa fa-paperclip p-r-5" onclick="viewReferenceFile('${value}', '${task.id}')"></i>`
                }
            },
            htmlEnable: true,
        })
    }
    const grid = new dhx.Grid("@gridId", {
        columns,
        autoWidth: true,
        autoHeight: true,
        leftSplit: 3,
        resizable: true,
        selection: "cell",
        keyNavigation: true,
        data: gridWithTotal,
        headerRowHeight: 50
    });

    document.getElementById("@gridId").addEventListener("keydown", myFunction);
        function myFunction(e) {
            if (e.keyCode == 37 || e.which == 37 || e.keyCode == 38 || e.which == 38 || e.keyCode == 39 || e.which == 39 || e.keyCode == 40 || e.which == 40) {
                grid.editEnd();
            }
        }

    let isEditing = false
    document.getElementById("@gridId").onkeypress = function (e) {
        if (isEditing) {
            return;
        }
        if (@currentObj.STATUS == "02" || @currentObj.STATUS == "04" ||@currentObj.STATUS == "05" || @project.STATUS == "04") {
            return;
        }
        if (e.which == 9 || e.which == 13) {
            return;
        }
        var selectedCell = grid.selection.getCell();
        if (selectedCell == undefined) {
            return;
        }
            const { row, column } = selectedCell;
        if (!column.id.includes('workVolume') && !column.id.includes('notes')) {
            return;
        }
        if (!(row.workStatusCode == 02)) {
            return;
        }
        if (row.unitCode === "%") {
            grid.editCell(row.id, column.id);
            row[column.id] = parseFloat(e.key) / 100;
        } else {
            grid.editCell(row.id, column.id);
            row[column.id] = parseFloat(e.key);
        }
    };

    $(document).bind('paste', function (e) {
        if (@currentObj.STATUS == "02" || @currentObj.STATUS == "04" ||@currentObj.STATUS == "05") {
            return;
        }
        var selectedCell = grid.selection.getCell();
        if (selectedCell == undefined) {
            return;
        }
        const { row, column } = selectedCell;
        if (!column.id.includes('workVolume') && !column.id.includes('notes')) {
            return;
        }
        if (@project.STATUS == "04" ||@project.STATUS == "05") {
            return
        }

        const pastedText = (e.originalEvent.clipboardData || window.clipboardData)?.getData('text').trim().split(/\r?\n */).map(r => r.split(/\t/));

        const indexSelectCell = grid.data.getIndex(row.id);
        const dataCell = grid.data.getRawData();

        var lengthText = 0;
        if (pastedText.length > dataCell.length - indexSelectCell) {
            lengthText = dataCell.length - indexSelectCell;
        } else {
            lengthText = pastedText.length;
        }
        const columnId = column.id;

        for (var i = 0; i < lengthText; i++) {
            const rowId = dataCell[indexSelectCell + i].id
            var index = grid.data.getIndex(rowId);
            var cellId = grid.data.getId(index);

            if (!(dataCell[indexSelectCell + i].workStatusCode == 02)) {
                continue;
            }
            if (!(column.$cellCss[cellId] == "dhx-cell-disabled ")) {
                var oldValue = dataCell[indexSelectCell + i][column.id];
                const rowData = grid.data.find({ by: 'id', match: rowId })
                dictValueOrgin[rowId] = rowData[columnId] ?? 0

                var value = String(pastedText[i][0]).replaceAll(",", "")

                if (String(value).includes("%")) {
                    value = String(value).replace("%", "")
                }
                value = validateNumber(value)
                dataCell[indexSelectCell + i][columnId] = value;
                grid.paint();

                if (oldValue?.toString() == value?.toString()) {
                    continue;
                }

                value = value ?? 0
                if (dictValueOrgin[rowId] === value) {
                    return
                }
                if (dataCell[indexSelectCell + i].unitCode === "%") {
                    value /= 100
                }
                const projectStructureId = dataCell[indexSelectCell + i].projectStructureId;
                const price = dataCell[indexSelectCell + i].price;
                const parentId = dataCell[indexSelectCell + i].parentId;

                const accumulatedVolume = rowData.accumulatedVolume + Number(value) - dictValueOrgin[rowId]
                const totalAccumulatedVolume = rowData.totalAccumulatedVolume + Number(value) - dictValueOrgin[rowId]
                const onProgressVolume = calculateKLDoDang({ ...rowData, accumulatedVolume })
                const percentageDone = calculateTyLeHoanThanh({ ...rowData, accumulatedVolume })
                grid.data.update(projectStructureId, { [columnId]: value, total: roundNumber(value * price), onProgressVolume, percentageDone }, true);

                updateTotalGrid(parentId);

            }
        }

        setTimeout(function () {
            grid.paint();
            updateTotalGrid();
        }, 100);
    });

    function ExportExcel() {
        grid.export.xlsx({
            name: "KhoiLuongThucHienKhachHang.xlsx",
            url: "@Url.Action("ExportExcelCustomer", new { header = JsonConvert.SerializeObject(header) })"
        });
    }

    function tempAlert(msg, duration) {
        var el = document.createElement("div");
        el.setAttribute("style", "display:inline-block;margin 0px auto;position:fixed;transition:all 0.5s aese-in-out 0s;z-index:1031;top:20px;right:20px;animation: growDown 1500ms ease-in-out forwards;transform - origin: top center");
        el.setAttribute("class", "bootstrap-notify-container alert alert-dismissble alert-success role=animated fadeInDown")
        el.innerHTML = msg;
        setTimeout(function () {
            el.parentNode.removeChild(el);
        }, duration);
        document.body.appendChild(el);
    }

    function excelFileToJSON(file) {
        if (@currentObj.STATUS == "02" || @currentObj.STATUS == "04" ||@currentObj.STATUS == "05" || @project.STATUS == "04") {
            alert("Không được phép chỉnh sửa!!!");
            return;
        }
        try {
            $("#import").hide();
            var reader = new FileReader();
            reader.readAsBinaryString(file);
            reader.onload = function (e) {
                var data = e.target.result;
                var workbook = XLSX.read(data, {type: 'binary'});
                var result = {};
                workbook.SheetNames.forEach(function (sheetName) {
                    var range = XLSX.utils.decode_range(workbook.Sheets[sheetName]['!ref']);
                    range.s.c = 0;
                    range.e.c = columns.length;
                    var new_range = XLSX.utils.encode_range(range);
                    var excelInJSON = XLSX.utils.sheet_to_row_object_array(workbook.Sheets[sheetName], { blankRows: false, defval: '', range: new_range });
                    result = excelInJSON
                });
                const array = JSON.parse(JSON.stringify(result, null, 4));
                array.splice(0, 3)
                for (i = 1; i < array.length; i++) {
                    if (!(grid.data._order[i].workStatusCode == 02)) {
                        continue;
                    }
                    let value = array[i].__EMPTY_8 ?? 0
                    grid.editCell(grid.data.getId(i), grid.config.columns[9].id);
                    grid.data._order[i].workVolume = validateNumber(String(value).replaceAll(",", ""));

                    grid.editCell(grid.data.getId(i), grid.config.columns[13].id);
                    grid.data._order[i].notes = array[i].__EMPTY_13;

                    const columnId = grid.config.columns[9].id;

                    const projectStructureId = grid.data._order[i].projectStructureId;
                    const price = grid.data._order[i].price;
                    const parentId = grid.data._order[i].parentId;

                    const accumulatedVolume = grid.data._order[i].accumulatedVolume + Number(value) - dictValueOrgin[grid.data._order[i].id]
                    const totalAccumulatedVolume = grid.data._order[i].totalAccumulatedVolume + Number(value) - dictValueOrgin[grid.data._order[i].id]
                    const onProgressVolume = calculateKLDoDang({ ...grid.data._order[i], accumulatedVolume })
                    const percentageDone = calculateTyLeHoanThanh({ ...grid.data._order[i], accumulatedVolume })
                    grid.data.update(projectStructureId, { [columnId]: value, total: roundNumber(value * price), onProgressVolume, percentageDone }, true);

                    updateTotalGrid(parentId);
                }
                grid.paint();
                tempAlert("Import thành công!",2000)
            }
        } catch (e) {
            alert("Lỗi trong quá trình Import!");
        }
    }

    const dictValueOrgin = {};

    grid.config.currentStatus = '@(currentObj.STATUS.GetEnum<ProjectWorkVolumeStatus>().GetValue())';

    grid.config.allowEditStatuses = ['@ProjectWorkVolumeStatus.KHOI_TAO.GetValue()',
        '@ProjectWorkVolumeStatus.KHONG_XAC_NHAN.GetValue()',
        '@ProjectWorkVolumeStatus.TU_CHOI.GetValue()'];

    _.forEach(grid.data.serialize(), (row) => {
        if (row.totalAccumulatedVolume > row.designVolume && row.contractVolume > 0) {
            setAlertColumnCustomer(row.id)
        } else {
            removeAlertColumn(row.id)
        }
    })
    grid.events.on("scroll", function (value, row, column) {
        _.forEach(grid.data.serialize(), (row) => {
            if (row.totalAccumulatedVolume > row.designVolume && row.contractVolume > 0) {
                setAlertColumnCustomer(row.id)
            } else {
                removeAlertColumn(row.id)
            }
        })
    });

    function validateVolume(row) {
        if (row.totalAccumulatedVolume > row.designVolume && row.contractVolume > 0) {
            setAlertColumnCustomer(row.id)
        } else {
            removeAlertColumn(row.id)
        }
    }

    grid.events.on("afterEditStart", function (row, col, editorType) {
        isEditing = true
        if (col.id == "workVolume") {
            setTimeout(function () {
                const { unitCode } = row
                const element = $(".dhx_cell-editor__textarea")
                if (unitCode === "%") {
                    element.val(element.val() * 100)
                    element.inputmask({ 'alias': 'percentage', 'max': 10000000, 'min': -9999999, 'allowMinus': true, 'groupSeparator': ',', 'digits': 10, 'autoGroup': true, 'autoUnmask': true });
                } else {
                    element.inputmask({ 'alias': 'decimal', 'groupSeparator': ',', 'digits': 10, 'autoGroup': true, 'autoUnmask': true });
                }
            }, 50);
        }
    });

    grid.events.on("beforeEditStart", function (row, col) {
        const { active, workStatusCode, isSummary } = row

        if (!@isProjectCanEdit.ToString().ToLower() || workStatusCode !== '@ProjectStructStatus.DANG_THUC_HIEN.GetValue()' || isSummary) {
            return false;
        }
        const allowEditStatuses = grid.config.allowEditStatuses
        const currentStatus = grid.config.currentStatus
        if (!allowEditStatuses.includes(currentStatus)) {
            return false;
        }
        const canEdit = col.id === "selected" || active;
        if (col.id === "workVolume") {
            dictValueOrgin[row.id] = row[col.id] ?? 0
        }
        return canEdit;
    });
    grid.events.on("beforeEditEnd", function (value, row, col) {
        if (row.unitCode === "%") {
            value /= 100;
        }
        if (col.id === "workVolume") {
            if (!value) {
                value = "0"
            }
            const isValueValid = !isNaN(value);
            if (isValueValid) {
                value = Inputmask.unmask(value, { alias: 'decimal', groupSeparator: ',', autoGroup: true });
                const accumulatedVolume = row.accumulatedVolume + Number(value) - dictValueOrgin[row.id]
                const totalAccumulatedVolume = row.totalAccumulatedVolume + Number(value) - dictValueOrgin[row.id]
                const onProgressVolume = calculateKLDoDang({ ...row, accumulatedVolume })
                const percentageDone = calculateTyLeHoanThanh({ ...row, accumulatedVolume })
                grid.data.update(row.id, {
                    totalAccumulatedVolume,
                    accumulatedVolume,
                    onProgressVolume,
                    percentageDone
                });
            }
            return isValueValid;
        }
        return true;
    });

    const updateTotalGrid = (parentId) => {
        let tempParentId = parentId
        while (tempParentId) {
            const parent = grid.data.find({ by: 'id', match: tempParentId })
            if (!parent) {
                break;
            }
            const children = grid.data.findAll({ by: 'parentId', match: tempParentId })
            const total = _.sumBy(children, "total")
            grid.data.update(tempParentId, _.set({}, `total`, total), true);
            tempParentId = parent.parentId
        }
        // calculate total of summary
        const totalSummary = grid.data.reduce((partialSum, row) => {
            const { total, parentId, isSummary } = row
            if (!allIds.includes(parentId) && !isSummary)
                return partialSum + total
            return partialSum
        }, 0)
        grid.data.update("@summaryRowId", _.set({}, `total`, totalSummary), true);
        grid.paint();
    }
    grid.events.on("afterEditEnd", function (value, row, column) {
        isEditing = false
        const { unitCode } = row
        const { id: columnId } = column
        value = value ?? 0
        if (dictValueOrgin[row.id] === value) {
            return
        }
        if (unitCode === "%") {
            value /= 100
        }
        const { projectStructureId, price, parentId } = row
        grid.data.update(projectStructureId, _.set({ [columnId]: value }, 'total', roundNumber(value * price)), true);

        updateTotalGrid(parentId);
        validateVolume({ ...row, [columnId]: value })
    });

    function saveData(isSent) {
        const allData = grid.data.serialize();
        const hasData = _.filter(allData, (data) => {
            const { workVolume, acceptVolume, notes } = data;
            return !_.isNil(workVolume) || !_.isNil(acceptVolume) || !_.isNil(notes)
        })
        if (!hasData) {
            alert("Không có dữ liệu cho lần cập nhật");
            return;
        }

        var checkAlert = false;
        _.forEach(allData, (row) => {
            if (row.totalAccumulatedVolume > row.designVolume && row.contractVolume > 0) {
                setAlertColumnCustomer(row.id)
                checkAlert = true;
            }
        })
        if (checkAlert) {
            alert("Tổng khối lượng đã nhập > Khối lượng thiết kế, nên không cho phép Lưu dữ liệu. Vui lòng kiểm tra lại!");
            return;
        }

        var yKien = "";

        if (isSent == "0") {
            var ajaxParams = {
                url: '@Url.Action("AddUpdateTimes")',
                type: "POST",
                data: {
                    projectId: '@currentObj.PROJECT_ID',
                    startDate: $('#@formId #fromDate').val(),
                    finishDate: $('#@formId #toDate').val(),
                    isCustomer: true,
                    details: hasData,
                    id: '@currentObj.ID',
                    isSent: isSent,
                    yKien: yKien
                },
                dataType: 'json',
                success: function (response) {
                    SubmitTimesIndex();
                    const { Data, State } = response
                    if (State && '@isEditingObj' === "False") {
                        Forms.Close('@ViewBag.ViewId');
                        Forms.LoadAjax({
                            url: `PS/VolumeWork/IndexVolumeWork?projectId=@currentObj.PROJECT_ID&isCustomer=true&id=${Data}`
                        });
                    }
                    Message.execute(response);
                }
            };
            Forms.Ajax(ajaxParams)
        }
        else {
            Swal.fire({
                title: 'Gửi dữ liệu?',
                text: "Bạn có chắc muốn Gửi dữ liệu này không?",
                icon: 'warning',
                input: 'text',
                inputPlaceholder: 'Ý kiến',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Gửi',
                cancelButtonText: 'Hủy'
            }).then((result) => {
                var yKien = result.value;
                if (result.isConfirmed) {
                    var ajaxParams = {
                        url: '@Url.Action("AddUpdateTimes")',
                        type: "POST",
                        data: {
                            projectId: '@currentObj.PROJECT_ID',
                            startDate: $('#@formId #fromDate').val(),
                            finishDate: $('#@formId #toDate').val(),
                            isCustomer: true,
                            details: hasData,
                            id: '@currentObj.ID',
                            isSent: isSent,
                            yKien: yKien
                        },
                        dataType: 'json',
                        success: function (response) {
                            SubmitTimesIndex();
                            const { Data, State } = response
                            if (State) {
                                Forms.Close('@ViewBag.ViewId');
                                Forms.LoadAjax({
                                    url: `PS/VolumeWork/IndexVolumeWork?projectId=@currentObj.PROJECT_ID&isCustomer=true&id=${Data}`
                                });
                            }
                            Message.execute(response);
                        }
                    };
                    Forms.Ajax(ajaxParams)
                }
            })
        }


    }

    function RefreshData() {
        const allData = grid.data.serialize();
        const hasData = _.filter(allData, (data) => {
            const { workVolume, acceptVolume, notes } = data;
            return !_.isNil(workVolume) || !_.isNil(acceptVolume) || !_.isNil(notes)
        })
        var ajaxParams = {
            url: '@Url.Action("RefreshData")',
            type: "POST",
            data: {
                projectId: '@currentObj.PROJECT_ID',
                startDate: $('#@formId #fromDate').val(),
                finishDate: $('#@formId #toDate').val(),
                isCustomer: true,
                details: hasData,
                id: '@currentObj.ID'
            },
            dataType: 'json',
            success: function (response) {
                SubmitTimesIndex();
                const { Data, State } = response
                if (State && '@isEditingObj' === "False") {
                    Forms.Close('@ViewBag.ViewId');
                    Forms.LoadAjax({
                        url: `PS/VolumeWork/IndexVolumeWork?projectId=@currentObj.PROJECT_ID&isCustomer=true&id=${Data}`
                    });
                }
            }
        };
        Forms.AjaxWithoutLoading(ajaxParams)
    }
    RefreshData()
    function onChangeDate() {
        var ajaxParams = {
            url: '@Url.Action("GetTimePeriodProjectVolumeData")',
            type: "POST",
            data: {
                id: '@currentObj.ID',
                projectId: '@currentObj.PROJECT_ID.ToString()',
                startDate: $('#@formId #fromDate').val(),
                finishDate: $('#@formId #toDate').val(),
                isCustomer: true,
            },
            dataType: 'json',
            success: function (response) {
                const { Data, State } = response
                if (State) {
                    Data.forEach(row => {
                        const camelObj = _.transform(row, function (result, val, key) {
                            result[_.camelCase(key)] = val;
                        })
                        const { projectStructureId } = camelObj
                        const currentRow = grid.data.find({ by: "id", match: projectStructureId })
                        grid.data.update(projectStructureId, { ...currentRow, ...camelObj, percentageDone: calculateTyLeHoanThanh({ ...currentRow, ...camelObj }) }, true);
                    });
                    grid.paint();
                }
            }
        };
        Forms.AjaxWithoutLoading(ajaxParams)
    }

    function updateGridCurrentStatus(status) {
        grid.config.currentStatus = status;
        const allowEditStatuses = grid.config.allowEditStatuses
        const currentStatus = grid.config.currentStatus
        if (!allowEditStatuses.includes(currentStatus)) {
            $('#@formId #fromDate').prop('disabled', true);
            $('#@formId #toDate').prop('disabled', true);
        } else {
            $('#@formId #fromDate').prop('disabled', false);
            $('#@formId #toDate').prop('disabled', false);
        }
        $('#@formId #status').val(statuses[status]);
    }
    @{
        Html.RenderPartial("_ProjectVolumeProgressScript", currentObj?.ID ?? Guid.Empty);
    }

</script>

