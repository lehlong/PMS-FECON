@model SMO.Service.PS.ContractService
@using SMO.Core.Entities.PS
@using SMO.Core.Entities.MD
@using SMO.Core.Entities
@{
    Model.ViewId = Guid.NewGuid().ToString();
    Model.FormId = Guid.NewGuid().ToString();
    var parentContract = new T_PS_CONTRACT();
    if (Model.ObjDetail.PARENT_CODE != null)
    {
        parentContract = Model.UnitOfWork.GetSession().Query<T_PS_CONTRACT>().FirstOrDefault(x => x.ID == Model.ObjDetail.PARENT_CODE);
    }
    var lstUserFecon = Model.UnitOfWork.GetSession().Query<T_AD_USER>().Where(x => x.USER_TYPE == UserType.Fecon).ToList();

    var lstVendor = Model.UnitOfWork.GetSession().Query<T_MD_VENDOR>().OrderBy(x => x.CODE).ToList();
}
<div id='@Model.ViewId' class="container-fluid child-content">
    <script src="~/Scripts/D2SCoreJS/UploadFile.js"></script>
    @using (Ajax.BeginForm("Create", null, FormDataUtils.GetAjaxOptions(Model.ViewId), new { @id = Model.FormId }))
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(m => m.ObjDetail.PROJECT_ID)
        @Html.HiddenFor(m => m.ObjDetail.PARENT_CODE)
        @Html.HiddenFor(m => m.ObjDetail.IS_SIGN_WITH_CUSTOMER)
        @Html.HiddenFor(m => m.ObjDetail.CUSTOMER_CODE)
        <div class="card">
            <div class="body" style="padding-top: 0px;">
                <ul class="nav nav-tabs" role="tablist">
                    <li role="presentation" class="active"><a style="padding-left:0px"><i class="material-icons">style</i> @(Model.ObjDetail.PARENT_CODE == null ? "TẠO MỚI HỢP ĐỒNG" : "TẠO MỚI PHỤ LỤC HỢP ĐỒNG") </a></li>
                </ul>

                <div class="tab-content">
                    <div class="page-function p-t-10">
                        <div class="page-function-button m-r-20">
                            @Html.MyButton("cmdBack", "Quay lại", string.Format("Forms.Close('{0}');", @Model.ViewId), "Alt+N", "arrow_back")
                            @Html.MyButton("cmdSave", "Tạo hợp đồng / phụ lục", "SubmitFormCreate()", "Alt+N", "done_all")
                        </div>
                    </div>

                    <div class="row" style="margin-top:20px;">
                        <div class="col-lg-1"></div>
                        <div class="col-lg-5">
                            @if (Model.ObjDetail.PARENT_CODE != null)
                            {
                                @Html.LabelFor(x => x.ObjDetail.NAME, "Hợp đồng gốc")
                                <div class="form-group">
                                    <div class="form-line">
                                        <input class="form-control" type="text" readonly value="@(parentContract?.NAME)">
                                    </div>
                                </div>
                            }
                            @Html.LabelFor(x => x.ObjDetail.NAME, "Tên hợp đồng")
                            <div class="form-group">
                                <div class="form-line">
                                    @Html.MyTextBoxFor(m => m.ObjDetail.NAME)
                                </div>
                                @Html.ValidationMessageFor(m => m.ObjDetail.NAME)
                            </div>

                            @Html.LabelFor(x => x.ObjDetail.PROJECT_ID, "Dự án")
                            <div class="form-group">
                                <div class="form-line">
                                    @Html.MyDropDownListFor(m => m.ObjDetail.PROJECT_ID, SelectListUtilities.GetProjects(),
                                   new { @data_live_search = "true", @class = "selectpicker show-tick", @disabled = "true" })
                                </div>
                                @Html.ValidationMessageFor(m => m.ObjDetail.PROJECT_ID)
                            </div>

                            @Html.LabelFor(x => x.ObjDetail.CONTRACT_NUMBER, "Số hợp đồng")
                            <div class="form-group">
                                <div class="form-line">
                                    @Html.MyTextBoxFor(m => m.ObjDetail.CONTRACT_NUMBER)
                                </div>
                                @Html.ValidationMessageFor(m => m.ObjDetail.CONTRACT_NUMBER)
                            </div>

                            @Html.LabelFor(x => x.ObjDetail.CONTRACT_TYPE, "Loại hợp đồng")
                            <div class="form-group">
                                <div class="form-line">
                                    @Html.MyDropDownListFor(m => m.ObjDetail.CONTRACT_TYPE, SelectListUtilities.GetContractTypes(Model.ObjDetail.IS_SIGN_WITH_CUSTOMER),
                                   new { @data_live_search = "true", @class = "selectpicker show-tick" })
                                </div>
                                @Html.ValidationMessageFor(m => m.ObjDetail.CONTRACT_TYPE)
                            </div>

                            @Html.LabelFor(x => x.ObjDetail.PO_SO_NUMBER, "Số PO/SO")
                            <div class="form-group">
                                <div class="form-line">
                                    @Html.MyTextBoxFor(m => m.ObjDetail.PO_SO_NUMBER)
                                </div>
                                @Html.ValidationMessageFor(m => m.ObjDetail.PO_SO_NUMBER)
                            </div>

                            <div class="form-group" style="display:flex; flex-flow: row; gap: 10px;">
                                <div style="flex: 1">
                                    <div class="form-line">
                                        <label>Ngày bắt đầu</label>
                                        @Html.MyTextBoxFor(m => m.ObjDetail.START_DATE, new { @class = "datepicker", @autocomplete = "off" })
                                    </div>
                                    @Html.ValidationMessageFor(m => m.ObjDetail.START_DATE)
                                </div>
                                <div style="flex: 1">
                                    <div class="form-line">
                                        <label>Ngày kết thúc</label>
                                        @Html.MyTextBoxFor(m => m.ObjDetail.FINISH_DATE, new { @class = "datepicker", @autocomplete = "off" })
                                    </div>
                                    @Html.ValidationMessageFor(m => m.ObjDetail.FINISH_DATE)
                                </div>
                            </div>
                           
                        </div>
                        <div class="col-lg-5">
                            @if (Model.ObjDetail.IS_SIGN_WITH_CUSTOMER)
                            {
                                @Html.LabelFor(x => x.ObjDetail.CUSTOMER_CODE, "Khách hàng")
                                <div class="form-group">
                                    <div class="form-line">
                                        @Html.MyDropDownListFor(m => m.ObjDetail.CUSTOMER_CODE, SelectListUtilities.GetCustomers(),
                                       new { @data_live_search = "true", @class = "selectpicker show-tick", @disabled = "true" })
                                    </div>
                                    @Html.ValidationMessageFor(m => m.ObjDetail.CUSTOMER_CODE)
                                </div>
                            }
                            else
                            {
                                @Html.LabelFor(x => x.ObjDetail.VENDOR_CODE, "Nhà thầu")
                                <div class="form-group">
                                    <div class="form-line">
                                        <select class="form-control  selectpicker show-tick" data-live-search="true" data-val="true" 
                                                data-val-required="Trường này bắt buộc nhập" data-show-subtext="true"
                                                id="ObjDetail_VENDOR_CODE" name="ObjDetail.VENDOR_CODE">
                                            <option value=""> - </option>
                                            @foreach (var item in lstVendor)
                                            {
                                                var selected = "";
                                                if (item.CODE == Model.ObjDetail.VENDOR_CODE)
                                                {
                                                    selected = "selected";
                                                }
                                                <option @selected data-subtext="@($"{item.CODE} - {item.MST}")" value="@item.CODE">@item.NAME - @item.SHORT_NAME</option>
                                            }
                                        </select>
                                    </div>
                                    @Html.ValidationMessageFor(m => m.ObjDetail.VENDOR_CODE)
                                </div>
                            }


                            <div class="form-group" style="display:flex; flex-flow: row; gap: 10px;">
                                <div style="flex: 5">
                                    <div class="form-line">
                                        <label>Giá trị hợp đồng (trước thuế)</label>
                                        @Html.MyTextBoxFor(m => m.ObjDetail.CONTRACT_VALUE, new { @class = "decimal", id = "txtValue", @data_inputmask = "'alias': 'decimal', 'groupSeparator': ',', 'digits': 0, 'autoGroup': true", onchange = "CalValue();" })
                                    </div>
                                    @Html.ValidationMessageFor(m => m.ObjDetail.CONTRACT_VALUE)
                                </div>
                                <div style="flex: 2">
                                    <div class="form-line">
                                        <label>VAT %</label>
                                        @Html.MyTextBoxFor(m => m.ObjDetail.VAT, new { @class = "decimal",id = "txtVAT", @data_inputmask = "'alias': 'decimal', 'groupSeparator': ',', 'digits': 0, 'autoGroup': true", onchange = "CalValue();" })
                                    </div>
                                    @Html.ValidationMessageFor(m => m.ObjDetail.VAT)
                                </div>
                                <div style="flex: 5">
                                    <div class="form-line">
                                        <label>Giá trị hợp đồng(sau thuế)</label>
                                        @Html.MyTextBoxFor(m => m.ObjDetail.CONTRACT_VALUE_VAT, new { @class = "decimal", id = "txtGiaTriSauThue", @data_inputmask = "'alias': 'decimal', 'groupSeparator': ',', 'digits': 0, 'autoGroup': true"})
                                    </div>
                                    @Html.ValidationMessageFor(m => m.ObjDetail.CONTRACT_VALUE_VAT)
                                </div>
                            </div>

                            <label>Người phụ trách</label>
                            <div class="form-group">
                                <div class="form-line">
                                    @Html.MyDropDownListFor(m => m.ObjDetail.NGUOI_PHU_TRACH,
                                     SelectListUtilities.GetProjectResources(Model.ObjDetail.PROJECT_ID),
                                     new { @data_live_search = "true", @class = "selectpicker" })
                                </div>
                                @Html.ValidationMessageFor(m => m.ObjDetail.NGUOI_PHU_TRACH)
                            </div>

                            <label>Trạng thái hợp đồng</label>
                            <div class="form-group">
                                @Html.MyDropDownListFor(m => m.ObjDetail.PAYMENT_STATUS, SelectListUtilities.GetContractStatus(), new { @data_live_search = "true", @class = "selectpicker show-tick" })
                                @Html.ValidationMessageFor(m => m.ObjDetail.PAYMENT_STATUS)
                            </div>

                            @Html.LabelFor(x => x.ObjDetail.REPRESENT_A, "Đại diện bên A")
                            <div class="form-group">
                                <div class="form-line">
                                    @Html.MyTextBoxFor(m => m.ObjDetail.REPRESENT_A)
                                </div>
                                @Html.ValidationMessageFor(m => m.ObjDetail.REPRESENT_A)
                            </div>

                            @Html.LabelFor(x => x.ObjDetail.REPRESENT_B, "Đại diện bên B")
                            <div class="form-group">
                                <div class="form-line">
                                    @Html.MyTextBoxFor(m => m.ObjDetail.REPRESENT_B)
                                </div>
                                @Html.ValidationMessageFor(m => m.ObjDetail.REPRESENT_B)
                            </div>

                            @Html.LabelFor(x => x.ObjDetail.NOTES, "Ghi chú")
                            <div class="form-group">
                                <div class="form-line">
                                    @Html.MyTextBoxFor(m => m.ObjDetail.NOTES)
                                </div>
                                @Html.ValidationMessageFor(m => m.ObjDetail.NOTES)
                            </div>
                        </div>

                    </div>

                    <hr style="margin:0;" />

                    <div class="p-l-10 p-t-10 row">
                        <div class="title-header"> <i class="material-icons">attachment</i> <span class="title-name">FILE ĐÍNH KÈM</span> </div>
                        <div class="col-lg-3 col-xs-1"></div>
                        <div class="col-lg-6 col-xs-10">
                            <div class="form-group" style="display:flex; flex-flow: row; gap: 10px;">
                                <div style="flex: 1">
                                    <span class="waves-effect btn-default btn btn-border" onclick="UploadFile.InsertFile();"
                                          style="width: 100%; padding: 6px 10px 15px 10px !important;">
                                        <i class="material-icons col-orange" style="font-size: 24px; top: 6px;">attach_file</i><span>Bấm để chọn file</span>
                                    </span>
                                </div>
                                <div style="flex: 1">
                                    <span class="waves-effect btn-default btn btn-border" onclick="InsertLink();"
                                          style="width: 100%; padding: 6px 10px 15px 10px !important;">
                                        <i class="material-icons col-orange" style="font-size: 24px; top: 6px;">link</i><span>Bấm để thêm link</span>
                                    </span>
                                </div>
                            </div>

                            <div id="divPreviewLink" class="m-t-10">
                               
                            </div>
                            <div id="divPreviewFile" class="m-t-10">

                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    
    <script type="text/template" id="templateLink">
        <div class="input-group form-group">
            <div>
                <input type="text" name="lstLink" class="form-control" style="border: 1px solid #ddd; padding: 10px" placeholder="Hãy điền đường dẫn URL">
            </div>
            <span class="input-group-addon" onclick="RemoveLink(this);">
                <i class="material-icons" style="color: red; margin-left: 10px; cursor: pointer; font-weight: bold;">close</i>
            </span>
        </div>
    </script>

    <script type="text/javascript">
        function RemoveLink(obj) {
            if (confirm("Bạn có chắc chắn xóa link này?")) {
                $(obj).parent().remove()
            }
        }
        function InsertLink() {
            var template = $("#templateLink").html();
            $("#divPreviewLink").append(template);
        }

        UploadFile.ListFile = [];

        function RemoveFile(obj, fileId) {
            if (!confirm("Bạn có chắc chắn xóa file này?")) {
                return;
            }
            $(obj).parent().parent().parent().parent().remove();
        }

        function LoadDetail(id) {
            Forms.LoadAjax(`/PS/Contract/Edit/${id}`);
            Forms.Close('@Model.ViewId.ToString()');
        }
        function CalValue() {
            var value = Inputmask.unmask($("#txtValue").val(), { alias: 'decimal', groupSeparator: ',', autoGroup: true });
            var vat = Inputmask.unmask($("#txtVAT").val(), { alias: 'decimal', groupSeparator: ',', autoGroup: true });
            var valueVAT = Number(value) + Number(value) * Number(vat) / 100;
            if (!isNaN(value)) {
                $("#txtGiaTriSauThue").val(valueVAT);
            }
        }

        function SubmitFormCreate() {
            if (!$('#@Model.FormId').valid()) {
                return false;
            }

            $(".decimal").inputmask('remove');
            var formData = new FormData($('#@Model.FormId')[0]);

            for (var i = 0; i < UploadFile.ListFile.length; i++) {
                formData.append("files", UploadFile.ListFile[i].DataFile);
            }

            Forms.ShowLoading();

            var headers = {
                'RequestVerificationToken': $('#antiForgeryToken').val(),
            };

            $.ajax({
                xhr: function () {
                    var xhr = new window.XMLHttpRequest();

                    xhr.upload.addEventListener("progress", function (evt) {
                        if (evt.lengthComputable) {
                            var percentComplete = evt.loaded / evt.total;
                            percentComplete = parseInt(percentComplete * 100);
                            console.log(percentComplete);

                            if (percentComplete === 100) {
                                //alert("kakalot");
                            }
                        }
                    }, false);

                    return xhr;
                },
                type: "POST",
                url: "@Url.Action("Create")",
                data: formData,
                headers: headers,
                contentType: false,
                processData: false,
                success: function (response) {
                    Message.execute(response);
                    Forms.HideLoading();
                },
                error: Forms.AjaxErrorHandler
            });
        };

        $(function () {
            Forms.CompleteUI();
            $(".decimal").inputmask({ "removeMaskOnSubmit": true });
        });
    </script>
</div>
